// Generated by CoffeeScript 1.9.3
(function() {
  $(function() {
    var brick;
    brick = "<div class='brick small'><div class='delete'>&times;</div></div>";
    // $(document).on("click touchend", ".gridly .brick", function(event) {
    //   var $this, size;
    //   event.preventDefault();
    //   event.stopPropagation();
    //   $this = $(this);
    //   $this.toggleClass('small');
    //   $this.toggleClass('large');
    //   if ($this.hasClass('small')) {
    //     size = 140;
    //   }
    //   if ($this.hasClass('large')) {
    //     size = 300;
    //   }
    //   $this.data('width', size);
    //   $this.data('height', size);
    //   return $('.gridly').gridly('layout');
    // });
    $(document).on("click", ".gridly .delete", function(event) {
      var $this;
      event.preventDefault();
      event.stopPropagation();
      var url = "region/deleteRegionType?id=" +this.id;
      $.post(url, function(data) {
        if (data === 'suc') {
          alert("删除成功");
          location.reload();
          $this = $(this);
          $this.closest('.brick').remove();
          return $('.gridly').gridly('layout');
        } else {
          alert("删除失败!");
        }
      });

    });
    // $(document).on("click", ".add", function(event) {
    //   event.preventDefault();
    //   event.stopPropagation();
    //   $('.gridly').append(brick);
    //   return $('.gridly').gridly();
    // });

    var reordering = function($elements) {
      // Called before the drag and drop starts with the elements in their starting position.
      //alert('start');
    };

    var reordered = function($elements) {
      // Called after the drag and drop ends with the elements in their ending position.
      // 当前对象
      var currentObj = this.reordered.arguments[1];
     // alert(JSON.stringify(currentObj));
      var currentId = currentObj[0].id;

      //alert('拖动对象：' + currentId);

      var arr = $elements;
      // 前一个对象
      var prevObj;
      // 后一个对象
      var afterObj;

      for (i = 0; i < arr.length; i++) {
        if (arr[i].id == currentId) {
          if (i > 0) {
            prevObj = arr[i - 1];
          }
          if(i + 1 < arr.length){
            afterObj = arr[i+1];
          }
        }
      }

      var preid=9999999;
      var afterid=9999999;
      if(prevObj != undefined){
        
      //  alert('前一个对象：' + prevObj.id)
        preid=prevObj.id;
      }
      if(afterObj != undefined){
        //alert('后一个对象：' + afterObj.id);
        afterid=afterObj.id;
      }

      $.ajax({
        async : true, // 是否异步
        cache : false, // 是否使用缓存
        type : 'post', // 请求方式,post
        data : {
          ownid:currentId,
          preid : preid,
          afterid : afterid
        },
        dataType : "text", // 数据传输格式
        url : "region/updateRegionTypeParentId" // 请求链接
      });


    };


    return $('.gridly').gridly({
      callbacks: { reordering: reordering , reordered: reordered }
    });

    //return $('.gridly').gridly();
  });

}).call(this);